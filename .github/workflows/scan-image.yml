name: Scan Docker Image

permissions:
  contents: read # Keep as read unless other steps need write access

on:
  repository_dispatch:
    types: [docker-image-pushed]

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3 # Or v4 if available/preferred

      - name: Debug event payload
        run: |
          echo "Received repository_dispatch event"
          echo "Event type: ${{ github.event.action }}"
          echo "Docker image: ${{ github.event.client_payload.image }}"

      - name: Pull Docker image
        run: docker pull ${{ github.event.client_payload.image }}

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Install prerequisites (jq)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Scan image with Trivy (Generate Reports)
        id: trivy_scan # Keep id if needed elsewhere, but outputs won't be used directly from here for status
        continue-on-error: true # Still allow continuation if scan finds issues
        run: |
          echo "üîç Starting vulnerability scan for image: ${{ github.event.client_payload.image }}"

          # Run Trivy, exit with 1 on vulns, save JSON.
          # The exit code here will be handled by continue-on-error.
          trivy image \
            --exit-code 1 \
            --severity CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN \
            --format json \
            ${{ github.event.client_payload.image }} > trivy-results.json

          # Generate human-readable summary (run even if the first command exited > 0)
          # Use --exit-code 0 here or ignore its exit code to ensure it runs
          trivy image \
            --exit-code 0 \
            --severity CRITICAL,HIGH,MEDIUM,LOW,UNKNOWN \
            --format table \
            ${{ github.event.client_payload.image }} > trivy-results.txt

      - name: Check Scan Results and Set Status
        id: scan_status # New ID for this step's output
        run: |
          if [ ! -f trivy-results.json ]; then
            echo "::error::trivy-results.json not found. Scan may have failed critically."
            # Set status to indicate failure explicitly if needed, or just let the job fail
            # echo "trivy_status=error" >> "$GITHUB_OUTPUT"
            exit 1 # Fail the job if the results file is missing
          fi

          echo "üìä Analyzing trivy-results.json..."
          CRITICAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-results.json)
          HIGH_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-results.json)
          MEDIUM_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' trivy-results.json)
          LOW_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="LOW")] | length' trivy-results.json)
          UNKNOWN_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity=="UNKNOWN")] | length' trivy-results.json)
          TOTAL_COUNT=$((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT + LOW_COUNT + UNKNOWN_COUNT))

          echo "Vulnerability Counts: CRITICAL=$CRITICAL_COUNT, HIGH=$HIGH_COUNT, MEDIUM=$MEDIUM_COUNT, LOW=$LOW_COUNT, UNKNOWN=$UNKNOWN_COUNT, TOTAL=$TOTAL_COUNT"

          # Set status output based purely on counts
          TRIVY_STATUS=$([ "$TOTAL_COUNT" -gt 0 ] && echo 1 || echo 0)
          echo "Scan resulted in status: $TRIVY_STATUS (1=vulns found, 0=clean)"
          echo "trivy_status=$TRIVY_STATUS" >> "$GITHUB_OUTPUT"

      - name: Show scan result summary
        # No need for the initial STATUS="" line from the log output in the actual YAML
        run: |
          # Get status from the dedicated 'scan_status' step
          STATUS="${{ steps.scan_status.outputs.trivy_status }}"

          # Check if status is empty (shouldn't happen with the check in previous step, but good safeguard)
          if [ -z "$STATUS" ]; then
            echo "::error::Failed to determine Trivy status output."
            exit 1
          fi

          if [ "$STATUS" != "0" ]; then
            echo "‚ùå Trivy scan found vulnerabilities ($TOTAL_COUNT total)." # Use count if available or just message
            if [ -f trivy-results.txt ]; then
              echo "üìã Showing summary from trivy-results.txt:"
              cat trivy-results.txt
            else
              echo "::warning::trivy-results.txt not found."
            fi
          else
            echo "‚úÖ Trivy scan passed: No vulnerabilities found matching severity criteria."
          fi

      - name: Delete image from DockerHub if vulnerabilities are found
        # Update the 'if' condition to use the new step's output
        if: steps.scan_status.outputs.trivy_status == '1'
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          set -e # Keep this to fail fast on errors within the script
          echo "Vulnerabilities found. Attempting to delete insecure Docker image..."

          IMAGE_FULL="${{ github.event.client_payload.image }}"
          echo "Raw image input: $IMAGE_FULL"

          # Consider making regex slightly more flexible if needed, e.g. for slashes in username/repo
          if [[ ! "$IMAGE_FULL" =~ ^[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+:[a-zA-Z0-9_.-]+$ ]]; then
            echo "::error::Invalid image format: '$IMAGE_FULL'. Expected format like: username/repository:tag"
            exit 1
          fi

          # Parsing logic seems okay for simple user/repo:tag
          IMAGE_NAME=$(echo $IMAGE_FULL | cut -d':' -f1)
          IMAGE_TAG=$(echo $IMAGE_FULL | cut -d':' -f2)
          # Ensure DOCKERHUB_USERNAME is used for the repo path if it's always user-owned repos
          REPO_NAME=$(echo $IMAGE_NAME | sed "s|^${DOCKERHUB_USERNAME}/||") # Extract repo name relative to user

          # Add more robust parsing if image names can be complex (e.g., handle quay.io/..., docker.io/..., etc.)

          echo "DEBUG: Full Image=$IMAGE_FULL"
          echo "DEBUG: Extracted Image Name (user/repo)=$IMAGE_NAME"
          echo "DEBUG: Extracted Repo Name=$REPO_NAME"
          echo "DEBUG: Extracted Image Tag=$IMAGE_TAG"
          echo "DEBUG: Using DockerHub Username=$DOCKERHUB_USERNAME for API path"

          # Rest of the deletion script... (Authentication and DELETE request)
          echo "Authenticating with Docker Hub API..."
          LOGIN_PAYLOAD="{\"username\": \"$DOCKERHUB_USERNAME\", \"password\": \"$DOCKERHUB_TOKEN\"}"
          AUTH_RES=$(curl -fsS -H "Content-Type: application/json" -X POST -d "$LOGIN_PAYLOAD" https://hub.docker.com/v2/users/login/) # Added -S for better curl errors

          if [ -z "$AUTH_RES" ]; then
            echo "::error::Authentication failed. No response from Docker Hub login API."
            exit 1
          fi

          AUTH_TOKEN=$(echo "$AUTH_RES" | jq -re .token) # Added -e to exit if .token is null/false

          if [ -z "$AUTH_TOKEN" ]; then
            echo "::error::Failed to extract authentication token. Check DOCKERHUB_USERNAME and DOCKERHUB_TOKEN. Raw Response: $AUTH_RES"
            exit 1
          fi
          echo "Authentication successful."

          echo "Sending DELETE request to Docker Hub API..."
          # Ensure the URL uses the correct username from secrets, not parsed from image if different
          API_URL="https://hub.docker.com/v2/repositories/${DOCKERHUB_USERNAME}/${REPO_NAME}/tags/${IMAGE_TAG}/"
          echo "Target API URL: ${API_URL}"

          delete_response_code=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE \
            -H "Authorization: JWT ${AUTH_TOKEN}" \
            "${API_URL}")

          echo "API Response HTTP Code: $delete_response_code"

          # Check response code (logic seems okay)
          if [ "$delete_response_code" -ge 200 ] && [ "$delete_response_code" -lt 300 ]; then
            echo "‚úÖ Image tag '${IMAGE_TAG}' deleted successfully from '${DOCKERHUB_USERNAME}/${REPO_NAME}'."
          elif [ "$delete_response_code" == "401" ]; then
            echo "::error::Failed to delete image tag (Unauthorized - 401). Check Docker Hub token permissions."
            exit 1
          elif [ "$delete_response_code" == "404" ]; then
            echo "::error::Failed to delete image tag (Not Found - 404). Verify repository '${DOCKERHUB_USERNAME}/${REPO_NAME}' and tag '${IMAGE_TAG}' exist."
            exit 1
          else
            echo "::error::Failed to delete image tag. HTTP Status Code: $delete_response_code"
            # Optionally print response body for more detail: curl -v ...
            exit 1
          fi